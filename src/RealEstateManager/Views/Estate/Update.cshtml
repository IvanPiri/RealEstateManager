@using RealEstateManager.Utils
@using RealEstateManager.Models.Data;
@model RealEstateManager.Models.Estate.EstateUpdateModel

@{
    ViewBag.Title = Localization.GetString("EstateUpdatePage_Title");
}

@using (Html.BeginForm("Update", "Estate", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h3>@Localization.GetString("EstateUpdatePage_Header")</h3>
        </div>
        <div class="card-body bg-light">
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.BuildingInfoId)
            <div class="form-group">
                @Html.LabelFor(x => x.Name)
                @Html.EditorFor(x => x.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.Name, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Address)
                @Html.EditorFor(x => x.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.Address, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Type)
                @Html.DropDownListFor(x => x.Type, CustomEnumHelper.ToSelectList<EstateType>(), new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Type, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Area)
                @Html.EditorFor(x => x.Area, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.Area, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Price)
                @Html.EditorFor(x => x.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.Price, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.PrivateDescription)
                @Html.EditorFor(x => x.PrivateDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.PrivateDescription, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.PublicDescription)
                @Html.EditorFor(x => x.PublicDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(x => x.PublicDescription, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Status)
                @Html.DropDownListFor(x => x.Status, CustomEnumHelper.ToSelectList<EstateStatusType>(), new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Status, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ExistingImagePaths)
                @if (Model.ExistingImagePaths != null)
                {
                    for (var i = 0; i < Model.ExistingImagePaths.Count; ++i)
                    {
                        @Html.HiddenFor(x => Model.ExistingImagePaths[i], new { @class = "image-path" })
                    }
                    <div class="image-container"></div>
                }
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Images)
                @Html.TextBoxFor(x => x.Images, new { type = "file", multiple = "multiple", @class = "d-block" })
                @Html.ValidationMessageFor(x => x.Images, null, new { @class = "text-danger" })
            </div>
            <button type="submit" class="btn btn-primary">@Localization.GetString("Button_Edit")</button>
            <br />
            @Html.ValidationSummary(true, null, new { @class = "text-danger" })
        </div>
    </div>
}

@section Scripts{
    <script>
        $(function() {
            function UpdateExistingImages() {
                var images = $(".image-path");
                var imageContainer = $(".image-container");

                images.each(function(index) {
                    var item = $(this);

                    var containerElement = $("<div/>")
                        .attr("class", "image-container-unit")
                        .appendTo(imageContainer);

                    var imgElement = $("<img/>")
                        .attr("src", item.attr("value"))
                        .attr("width", "128")
                        .attr("height", "128")
                        .appendTo(containerElement);

                    var btnElement = $("<span/>")
                        .attr("class", "btn btn-primary")
                        .data("path", item.attr("value"))
                        .text("@Localization.GetString("Button_Delete")")
                        .appendTo(containerElement);

                    btnElement.on("click", function () {
                        item.remove();
                        containerElement.remove();
                    });

                    imageContainer.append(containerElement);
                });
            }

            UpdateExistingImages();
        });
    </script>
}
